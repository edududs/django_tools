line-length = 110

# Selected linting rules
[lint]
select = [
    "E",      # Errors (PEP8, Syntax errors)
    "F",      # Flake8 (Logical errors, Flake8-bugbear, etc.)
    "W",      # Warnings (PEP8, Warnings)
    "I",      # isort (Import organization)
    "N",      # Naming (Naming conventions - PEP8)
    "B",      # Bugbear (Possible bugs or bad design)
    "A",      # Builtins (Conflicts with Python built-ins)
    "C4",     # Comprehensions (Suggests list/dict/set comprehensions)
    "SIM",    # Simplifiable (Code simplification suggestions)
    "ERA",    # Eradicate (Unnecessary/dead code comments)
    "UP",     # Modernize (Modern Python syntax suggestions)
    "S",      # Bandit (Security rules)
    "RET",    # Return (Return code rules)
    "SLF",    # Self (Rules for first argument of methods/functions)
    "ARG",    # Arguments (Unused arguments)
    "PTH",    # Pathlib (Suggests usage of 'pathlib')
    "PL",     # Pylint (General Pylint rules)
    "RUF",    # Ruff (Ruff-specific rules)
    "COM",    # Comments (Commenting rules)
    "DTZ",    # DateTime (Timezone rules)
    "C90",    # Complexity (Cyclomatic complexity)
    "D",      # Docstrings (Docstring rules)
    "ICN",    # Import Conventions (Import conventions)
    "ISC",    # Implicit String Concatenation
    "PIE",    # Pyupgrade-like (Python syntax optimizations)
    "PT",     # Pytest (Rules for Pytest tests)
    "Q",      # Quote (Quote consistency)
    "RSE",    # Raise (Exception raising best practices)
    "TID",    # Tidy (Code organization rules)
    "YTT",    # Yield (Generator function rules)
    "BLE",    # Blind Exceptions (Generic exception handling)
    "FBT",    # Boolean Trailing (Trailing boolean arguments)
    "DJ",     # Django (Django-specific rules)
    "EM",     # Error Message (Better error messages)
    "EXE",    # Executable (Execution permissions checks)
    "FA",     # F-String (F-string usage suggestions)
    "G",      # Logging (Logging best practices)
    "INP",    # Implicit Namespace Package rules
    "T10",    # Debug (Debugging statements in code)
    "PYI",    # Pyright (Typing rules)
    "SLOT",   # Slots (Suggests use of __slots__)
    "INT",    # Internationalization (i18n)
    "PD",     # Pandas-specific rules
    "PGH",    # Pygame Helpers
    "TRY",    # Try (Exception handling best practices)
    "FLY",    # Flynt (F-string usage)
    "NPY",    # Numpy-specific rules
    "AIR",    # Airflow-specific rules
    "PERF",   # Perflint (Performance suggestions)
    "FURB",   # Furb (Code autofixes)
    "LOG",    # Additional logging rules
]

# Ignored rules
ignore = [
    "E501",      # Line too long (controlled via line-length)
    "D100",      # Missing docstring in public module
    "D101",      # Missing docstring in public class
    "D102",      # Missing docstring in public method
    "D103",      # Missing docstring in public function
    "D104",      # Missing docstring in public package
    "D105",      # Missing docstring in magic method
    "D106",      # Missing docstring in public nested class
    "D107",      # Missing docstring in __init__
    "D203",      # 1 blank line required before class docstring (conflicts with D211)
    "D213",      # Multi-line docstring summary should start at the second line (conflicts with D212)
    "D205",      # 1 blank line required between summary line and description
    "D401",      # First line should be imperative
    "UP006",     # Use list instead of list()
    "UP035",     # Use X instead of Y
    "PLR2004",   # Magic constant
    "PLC0415",   # Import aliased to import_module
    "PLR0904",   # Too many public methods
    "S608",      # SQL query building (SQL injection risk)
    "N806",      # Variable in function should be lowercase
    "B905",      # Zip without strict=True
    "PLR0913",   # Too many arguments
    "FBT001",    # Boolean default value
    "FBT002",    # Boolean positional argument
    "FBT003",    # Boolean positional argument default
    "A003",      # Shadowing built-ins
    "COM812",    # Missing trailing comma
    "ISC001",    # Single-line implicit string concatenation
    "Q000",      # Unnecessary quote
    "Q001",      # Single/Double quote
    "Q002",      # Unnecessary quote around string literal
    "Q003",      # Avoid using single quotes for module level docstrings
    "ERA001",    # Commented-out code
    "G004",      # Use f-string for logging
    "T20",       # Print statements
    "S603",      # subprocess.call with shell=True
    "S607",      # subprocess.call with executable
    "TRY003",    # Avoid bare except
    "PLR0912",   # Too many branches
    "PLR0915",   # Too many statements
    "TID252",    # Banned imports
    "PLC",       # Pylint warnings
    "BLE001",    # Blind exception
    "PTH123",    # Use open instead of Path.open
    "PLR0917",   # Too many arguments on a call
    "T201",      # Print statement
    "UP045",     # Use dict.get instead of if/else
    "RUF029",    # Prefer f-string
    "EM101",     # Error message must be a string
    "B008",      # Function call as default argument
    "TRY300",    # Avoid using 'raise from' on exceptions
    "TRY301",    # Avoid using 'raise from' on exceptions
    "RUF012",    # Class-level mutable default
    "S311",      # Use of insecure function random.choice
    "B904",      # Use raise from to specify exception cause
]

# Per-file specific configuration
[lint.per-file-ignores]
"__init__.py" = ["F401", "F403", "F405"]
# Test files - ignore common security and debug errors
"**/test_*.py" = [
    "S105",      # Possible hardcoded password (acceptable in tests)
    "S101",      # Use of assert (assert is common in tests)
    "T100",      # Import for debugger found (debuggers are acceptable in tests)
    "T201",      # Print statement (prints are acceptable in tests)
    "T20",       # Print statements (prints are acceptable in tests)
    "PLR2004",   # Magic constant (magic constants are acceptable in tests)
    "PLR0913",   # Too many arguments (tests may have many arguments)
    "PLR0912",   # Too many branches (tests may have many branches)
    "PLR0915",   # Too many statements (tests may have many statements)
    "PLR0917",   # Too many arguments on a call (tests may have many calls)
    "C901",      # Too complex (tests may be complex)
    "B008",      # Function call as default argument (common in fixtures)
    "FBT001",    # Boolean default value (common in tests)
    "FBT002",    # Boolean positional argument (common in tests)
    "FBT003",    # Boolean positional argument default (common in tests)
    "A003",      # Shadowing built-ins (common in tests)
    "COM812",    # Missing trailing comma (not critical in tests)
    "ISC001",    # Single-line implicit string concatenation (ok in tests)
    "Q000",      # Unnecessary quote (not critical in tests)
    "Q001",      # Single/Double quote (not critical in tests)
    "Q002",      # Unnecessary quote around string literal (not critical in tests)
    "Q003",      # Avoid using single quotes for module level docstrings (not critical in tests)
    "ERA001",    # Commented-out code (common in tests for documentation)
    "G004",      # Use f-string for logging (not critical in tests)
    "TRY003",    # Avoid bare except (common in tests for catching any exception)
    "TID252",    # Banned imports (test-specific imports acceptable)
    "BLE001",    # Blind exception (common in tests)
    "PTH123",    # Use open instead of Path.open (not critical in tests)
    "UP045",     # Use dict.get instead of if/else (not critical in tests)
    "RUF029",    # Prefer f-string (not critical in tests)
    "EM101",     # Error message must be a string (not critical in tests)
    "TRY300",    # Avoid using 'raise from' on exceptions (common in tests)
    "TRY301",    # Avoid using 'raise from' on exceptions (common in tests)
    "RUF012",    # Class-level mutable default (common in fixtures)
    "S311",      # Use of insecure function random.choice (acceptable in tests)
    "B904",      # Use raise from to specify exception cause (common in tests)
]
# Test configuration files
"**/conftest.py" = [
    "S105",      # Possible hardcoded password
    "S101",      # Use of assert
    "T100",      # Import for debugger found
    "T201",      # Print statement
    "T20",       # Print statements
    "PLR2004",   # Magic constant
    "PLR0913",   # Too many arguments
    "PLR0912",   # Too many branches
    "PLR0915",   # Too many statements
    "PLR0917",   # Too many arguments on a call
    "C901",      # Too complex
    "B008",      # Function call as default argument
    "FBT001",    # Boolean default value
    "FBT002",    # Boolean positional argument
    "FBT003",    # Boolean positional argument default
    "A003",      # Shadowing built-ins
    "COM812",    # Missing trailing comma
    "ISC001",    # Single-line implicit string concatenation
    "Q000",      # Unnecessary quote
    "Q001",      # Single/Double quote
    "Q002",      # Unnecessary quote around string literal
    "Q003",      # Avoid using single quotes for module level docstrings
    "ERA001",    # Commented-out code
    "G004",      # Use f-string for logging
    "TRY003",    # Avoid bare except
    "TID252",    # Banned imports
    "BLE001",    # Blind exception
    "PTH123",    # Use open instead of Path.open
    "UP045",     # Use dict.get instead of if/else
    "RUF029",    # Prefer f-string
    "EM101",     # Error message must be a string
    "TRY300",    # Avoid using 'raise from' on exceptions
    "TRY301",    # Avoid using 'raise from' on exceptions
    "RUF012",    # Class-level mutable default
    "S311",      # Use of insecure function random.choice
    "B904",      # Use raise from to specify exception cause
]

# Formatting settings
[format]
quote-style = "double"
indent-style = "space"
line-ending = "auto"
skip-magic-trailing-comma = false